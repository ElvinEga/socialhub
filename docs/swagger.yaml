definitions:
  controllers.AIChatPostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/controllers.ChatMessageResponse'
        type: array
      post_type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  controllers.AuthResponse:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        description: Token is optional
        type: string
      user:
        allOf:
        - $ref: '#/definitions/controllers.UserResponse'
        description: User is optional
    type: object
  controllers.ChatMessageResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      reason:
        type: string
      sender:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.MessageResponse:
    properties:
      message:
        type: string
    type: object
  controllers.PostInput:
    properties:
      content:
        type: string
      image_url:
        type: string
    type: object
  controllers.ProfileResponse:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      followers_count:
        type: integer
      following_count:
        type: integer
      id:
        type: integer
      name:
        type: string
      profile_picture:
        type: string
      username:
        type: string
    type: object
  controllers.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  controllers.Request:
    properties:
      content:
        type: string
    type: object
  controllers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      profile_picture:
        type: string
      username:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      parent_id:
        type: integer
      post:
        $ref: '#/definitions/models.Post'
      post_id:
        type: integer
      replies:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Like:
    properties:
      created_at:
        type: string
      id:
        type: integer
      post:
        $ref: '#/definitions/models.Post'
      post_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      likes:
        items:
          $ref: '#/definitions/models.Like'
        type: array
      post_type:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      followers:
        description: Self-referential many-to-many for followers and following.
        items:
          $ref: '#/definitions/models.User'
        type: array
      following:
        items:
          $ref: '#/definitions/models.User'
        type: array
      id:
        type: integer
      name:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      profile_picture:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/ai-posts:
    post:
      consumes:
      - application/json
      description: Create a new AI chat post with an initial prompt. The post type
        will be set to "ai".
      parameters:
      - description: Initial prompt from the user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AIChatPostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create an AI Chat Post
      tags:
      - AIChat
  /api/ai-posts/{id}:
    get:
      description: Retrieve an AI chat post along with its conversation thread.
      parameters:
      - description: AI Chat Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AIChatPostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get an AI Chat Post
      tags:
      - AIChat
  /api/ai-posts/{id}/messages:
    post:
      consumes:
      - application/json
      description: For an existing AI chat post, this endpoint accepts a new user
        prompt, saves it, sends it to OpenAI, streams the response in real time (using
        Server-Sent Events), and finally appends the complete AI reply as a new message
        in the conversation thread.
      parameters:
      - description: AI Chat Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Chat message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Request'
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed OpenAI response
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Add new message to an AI chat post and get a response from OpenAI
      tags:
      - AIChat
  /api/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login Input
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
      summary: Login user
      tags:
      - Auth
  /api/logout:
    post:
      description: Logs out the user by adding their token to a blacklist so it cannot
        be used further.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
      summary: Logout user
      tags:
      - Auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with auto-generated username
      parameters:
      - description: Register Input
        in: body
        name: registerInput
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
      summary: Register a new user
      tags:
      - Auth
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Allows the commentâ€™s author to delete it
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Allows the commentâ€™s author to update it
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: Edit a comment
      tags:
      - Comments
  /comments/{id}/replies:
    post:
      consumes:
      - application/json
      description: Allows a user to reply to an existing comment. The reply is also
        a comment, with a ParentID linking it to the original comment.
      parameters:
      - description: Parent Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reply content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a reply to a comment
      tags:
      - Comments
  /posts:
    get:
      description: Get a list of all posts with optional pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Posts per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: List all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with content and optional image URL
      parameters:
      - description: Post Input
        in: body
        name: postInput
        required: true
        schema:
          $ref: '#/definitions/controllers.PostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete a post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Edit a post's content and image URL
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post Input
        in: body
        name: postInput
        required: true
        schema:
          $ref: '#/definitions/controllers.PostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Edit a post
      tags:
      - posts
  /posts/{id}/comments:
    post:
      consumes:
      - application/json
      description: Allows a user to comment on a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a comment to a post
      tags:
      - Comments
  /posts/timeline:
    get:
      description: Get posts created by the authenticated user and those they follow
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get timeline posts
      tags:
      - posts
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ProfileResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - User
  /users/{id}/follow:
    post:
      consumes:
      - application/json
      description: Follow another user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - User
  /users/{id}/unfollow:
    post:
      consumes:
      - application/json
      description: Unfollow another user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - User
swagger: "2.0"
